@page "/accounts"

@using System.Net
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using MailerWeb.Shared.Models
@using MailerWeb.Shared.Models.Requests;
@using MailerWeb.Shared.Models.Responses;
@using Microsoft.AspNetCore.Components
@using Services
@using Newtonsoft.Json;

@inject IUriHelper UriHelper
@inject LocalStorage Storage
@inject HttpService Http
@inject LanguageService Lang



<div class="row">
    <div class="col-md-4">

        @if (IsEnabled)
        {
            <p class="h1">@Lang.Languages[Language]["accManager"]</p>
            <div class="form-group">
                <input type="email" class="form-control" id="inputEmail" aria-describedby="emailHelp" placeholder="@Lang.Languages[Language]["entEmail"]" bind="@Login" />
                <small id="emailHelp" class="form-text text-muted">@Lang.Languages[Language]["wwNs"]</small>
            </div>
            <div class="form-group">
                <input type="password" class="form-control" id="inputPassword" placeholder="@Lang.Languages[Language]["pass"]" bind="@Password" />
            </div>
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="additionalSettings" bind="@ShowAdditionalSettings" />
                    <label class="form-check-label" for="additionalSettings">@Lang.Languages[Language]["addSet"]</label>
                </div>
            </div>
            @if (ShowAdditionalSettings)
            {
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="@Lang.Languages[Language]["entImap"]" bind="@ImapAddress" />
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="@Lang.Languages[Language]["entImapPort"]" bind="@ImapPort" />
                </div>
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="@Lang.Languages[Language]["entSmtp"]" bind="@SmtpAddress" />
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="@Lang.Languages[Language]["entSmtpPort"]" bind="@SmtpPort" />
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="updateSettings" bind="@NewSettings" />
                        <label class="form-check-label" for="updateSettings">@Lang.Languages[Language]["updSett"]</label>
                    </div>
                </div>
            }

            <div class="form-group">
                <button class="btn btn-primary" onclick="@(async () => await SignIn())">@Lang.Languages[Language]["si"]</button>
            </div>


            @if (MailerWebCurrentUser != null)
             {
                 <div class="form-group">
                     <div class="card">
                         <div class="card-header">
                             @Lang.Languages[Language]["curAcc"]
                         </div>
                         <div class="card-body">
                             @MailerWebCurrentUser.Login
                         </div>
                     </div>
                 </div>
             }

            @if (MailerWebUsersList != null)
             {
                 <div class="form-group">
                     <div class="card">
                         <div class="card-header">
                             @Lang.Languages[Language]["addedAccs"]
                         </div>
                         <div class="card-body">
                             @foreach (var value in MailerWebUsersList)
                             {
                                 <div class="form-group">
                                     <div class="card">
                                         <div class="card-body">
                                             <button type="button" class="btn btn-link" onclick="@(async () => await SetCurrent(value))">@value.Login</button>
                                             <button type="button" class="btn btn-link" onclick="@(async () => await Delete(value))">@Lang.Languages[Language]["del"]</button>
                                         </div>
                                     </div>
                                 </div>
                             }
                         </div>
                     </div>
                 </div>
             }
        }
        else
        {
            <div class="form-group">
                <div class="alert alert-primary" role="alert">@Lang.Languages[Language]["pw"]</div>
            </div>
        }

        @if (IsError)
        {
            <div class="form-group">
                <div class="alert alert-danger" role="alert">@Error</div>
            </div>
        }

        @if (IsSuccess)
        {
            <div class="form-group">
                <div class="alert alert-success" role="alert">@Lang.Languages[Language]["sa"]</div>
            </div>
        }

    </div>
</div>


@functions
{
    private bool ShowAdditionalSettings { get; set; } = false;
    private string Error { get; set; }
    private bool IsError { get; set; }

    private bool IsSuccess { get; set; }
    private bool IsEnabled { get; set; } = true;

    private string Login { get; set; }
    private string Password { get; set; }
    private string ImapAddress { get; set; }
    private int ImapPort { get; set; }
    private string SmtpAddress { get; set; }
    private int SmtpPort { get; set; }
    private bool NewSettings { get; set; }
    private int Language { get; set; }

    List<StorageRecord> MailerWebUsersList { get; set; }
    StorageRecord MailerWebCurrentUser { get; set; }


    protected override void OnInit()
    {
        IsEnabled = false;
        try
        {
            Language = Convert.ToInt32(Storage["MailerWebLanguage"]);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        try
        {
            MailerWebUsersList = JsonConvert.DeserializeObject<List<StorageRecord>>(Storage["MailerWebUsers"]);
            MailerWebCurrentUser = JsonConvert.DeserializeObject<StorageRecord>(Storage["MailerWebCurrentUser"]);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        IsEnabled = true;
    }

    private async Task SetCurrent(StorageRecord record)
    {
        MailerWebCurrentUser = record;
        Storage["MailerWebCurrentUser"] = JsonConvert.SerializeObject(MailerWebCurrentUser);
    }

    private async Task Delete(StorageRecord record)
    {
        IsEnabled = false;
        MailerWebUsersList.Remove(MailerWebUsersList.FirstOrDefault(e => e.Login == record.Login));
        if (MailerWebCurrentUser.Login == record.Login)
        {
            var newRecord = MailerWebUsersList.FirstOrDefault();
            if (newRecord == null)
            {
                Storage["MailerWebCurrentUser"] = null;
                MailerWebCurrentUser = null;
            }
            else
            {
                Storage["MailerWebCurrentUser"] = JsonConvert.SerializeObject(newRecord);
                MailerWebCurrentUser = newRecord;
            }
        }

        Storage["MailerWebUsers"] = JsonConvert.SerializeObject(MailerWebUsersList);

        StateHasChanged();
        IsEnabled = true;
    }

    private async Task SignIn()
    {
        IsEnabled = false;
        IsError = false;
        IsSuccess = false;
        var authCredentials = new SignCredentials
        {
            ConnectionSettings = null,
            Login = Login,
            Password = Password,
            NewConnectionSettings = NewSettings
        };


        if (!string.IsNullOrEmpty(ImapAddress))
        {
            var imap = new ImapConfiguration() { Address = ImapAddress, Port = ImapPort };
            var smtp = new SmtpConfiguration() { Address = SmtpAddress, Port = SmtpPort };
            authCredentials.ConnectionSettings = new ConnectionConfiguration() { ImapConfiguration = imap, SmtpConfiguration = smtp };
            authCredentials.NewConnectionSettings = NewSettings;
        }

        var response = await Http.Request(HttpMethod.Post, UriHelper.GetBaseUri() + "api/imap/SignIn", authCredentials);

        if (!response.IsSuccessStatusCode)
        {
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
            Error = response.StatusCode + ": " + errorResponse.UserMessage;

            IsError = true;

            return;
        }

        var successResponse = JsonConvert.DeserializeObject<TokenResponse>(await response.Content.ReadAsStringAsync());

        var storageRecord = new StorageRecord { Login = Login, Token = successResponse.Token };

        if (MailerWebUsersList == null)
        {
            MailerWebUsersList = new List<StorageRecord> { storageRecord };
        }
        else
        {
            if (MailerWebUsersList.FirstOrDefault(e => e.Login == Login) != null)
            {
                MailerWebUsersList.Remove(MailerWebUsersList.FirstOrDefault(e => e.Login == Login));
            }
            MailerWebUsersList.Add(storageRecord);
        }

        MailerWebCurrentUser = storageRecord;

        Storage["MailerWebUsers"] = JsonConvert.SerializeObject(MailerWebUsersList);

        Storage["MailerWebCurrentUser"] = JsonConvert.SerializeObject(storageRecord);

        IsSuccess = true;
        IsEnabled = true;
    }
}
