@page "/accounts"

@using System.Net
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using MailerWeb.Shared.Models
@using MailerWeb.Shared.Models.Requests;
@using MailerWeb.Shared.Models.Responses;
@using Microsoft.AspNetCore.Components
@using Services
@using Newtonsoft.Json;

@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@inject LocalStorage Storage
@inject HttpService Http

<h1>Accounts Manager</h1>
<div>
    <div class="form-row">
        <div class="form-group">
            <input type="email" class="form-control" id="inputEmail" aria-describedby="emailHelp" placeholder="Enter email" bind="@Login" />
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        <div class="form-group">
            <input type="password" class="form-control" id="inputPassword" placeholder="Password" bind="@Password" />
        </div>
    </div>
    <div class="form-group">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="additionalSettings" bind="@ShowAdditionalSettings" />
            <label class="form-check-label" for="additionalSettings">Show Additional Settings</label>
        </div>
    </div>
    @if (ShowAdditionalSettings)
    {
        <div class="form-row">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Enter Imap Address" bind="@ImapAddress" />
            </div>
            <div class="form-group">
                <input type="number" class="form-control" placeholder="Enter Imap Port" bind="@ImapPort" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Enter Smtp Address" bind="@SmtpAddress" />
            </div>
            <div class="form-group">
                <input type="number" class="form-control" placeholder="Enter Smtp Port" bind="@SmtpPort" />
            </div>
        </div>
        <div class="form-group">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="updateSettings" bind="@NewSettings" />
                <label class="form-check-label" for="updateSettings">Update Connection Settings</label>
            </div>
        </div>
    }
    <button class="btn btn-primary" onclick="@(async () => await SignIn())">Sign In</button>
    @if (IsError)
    {
        <div class="form-row">
            <div class="alert alert-danger" role="alert">@Error</div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Storage["MailerWebCurrentUser"]))
    {
        <div class="card">
            <div class="card-body">
                @Storage["MailerWebCurrentUser"]
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Storage["MailerWebUsers"]))
    {
        <div class="card">
            <div class="card-body">
                @Storage["MailerWebUsers"]
            </div>
        </div>
    }
</div>


@functions
{
    private bool ShowAdditionalSettings { get; set; } = false;
    private string Error { get; set; }
    private bool IsError { get; set; } = false;

    private string Login { get; set; }
    private string Password { get; set; }
    private string ImapAddress { get; set; }
    private int ImapPort { get; set; }
    private string SmtpAddress { get; set; }
    private int SmtpPort { get; set; }
    private bool NewSettings { get; set; }

    private async Task SignIn()
    {
        IsError = false;
        var authCredentials = new SignCredentials
        {
            ConnectionSettings = new ConnectionConfiguration(),
            Login = Login,
            Password = Password,
            NewConnectionSettings = NewSettings
        };

        authCredentials.ConnectionSettings = null;

        if (!string.IsNullOrEmpty(ImapAddress))
        {
            authCredentials.ConnectionSettings = new ConnectionConfiguration
            {
                ImapConfiguration =
            {
                Address = ImapAddress,
                Port = ImapPort
            },
                SmtpConfiguration =
            {
                Address = SmtpAddress,
                Port = SmtpPort
            }
            };
        }

        var response = await Http.Request(HttpMethod.Post, UriHelper.GetBaseUri() + "api/imap/SignIn", authCredentials);

        if (!response.IsSuccessStatusCode)
        {
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
            Error = errorResponse.UserMessage;

            IsError = true;

            return;
        }

        var successResponse = JsonConvert.DeserializeObject<TokenResponse>(await response.Content.ReadAsStringAsync());

        var storageRecord = new StorageRecord { Login = Login, Token = successResponse.Token};

        List<StorageRecord> mailerWebUsersList = null;

        var mailerWebUsers = Storage["MailerWebUsers"];
        if (!string.IsNullOrEmpty(mailerWebUsers))
        {
            mailerWebUsersList = JsonConvert.DeserializeObject<List<StorageRecord>>(mailerWebUsers);
            if (mailerWebUsersList.FirstOrDefault(e => e.Login == Login) != null)
            {
                mailerWebUsersList.Remove(mailerWebUsersList.FirstOrDefault(e => e.Login == Login));
            }
            mailerWebUsersList.Add(storageRecord);
        }
        else
        {
            mailerWebUsersList = new List<StorageRecord> {storageRecord};
        }

        Storage["MailerWebUsers"] = JsonConvert.SerializeObject(mailerWebUsersList);

        Storage["MailerWebCurrentUser"] = JsonConvert.SerializeObject(storageRecord);

    }
}
