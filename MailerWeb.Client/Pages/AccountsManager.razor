@page "/accounts"

@using System.Net
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using MailerWeb.Shared.Models
@using MailerWeb.Shared.Models.Requests;
@using MailerWeb.Shared.Models.Responses;
@using Microsoft.AspNetCore.Components
@using Services
@using Newtonsoft.Json;

@inject Microsoft.AspNetCore.Blazor.Services.WebAssemblyUriHelper UriHelper
@inject LocalStorage Storage
@inject HttpService Http



    <div class="row">
        <div class="col-md-4">
            <p class="h1">Accounts Manager</p>
            <div class="form-group">
                <input type="email" class="form-control" id="inputEmail" aria-describedby="emailHelp" placeholder="Enter email" bind="@Login" />
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </div>
            <div class="form-group">
                <input type="password" class="form-control" id="inputPassword" placeholder="Password" bind="@Password" />
            </div>
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="additionalSettings" bind="@ShowAdditionalSettings" />
                    <label class="form-check-label" for="additionalSettings">Show Additional Settings</label>
                </div>
            </div>
            @if (ShowAdditionalSettings)
            {
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Enter Imap Address" bind="@ImapAddress" />
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="Enter Imap Port" bind="@ImapPort" />
                    <small class="form-text text-muted">Port for IMAP 993</small>
                </div>
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Enter Smtp Address" bind="@SmtpAddress" />
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="Enter Smtp Port" bind="@SmtpPort" />
                    <small class="form-text text-muted">Port for SMTP 465</small>
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="updateSettings" bind="@NewSettings" />
                        <label class="form-check-label" for="updateSettings">Update Connection Settings</label>
                    </div>
                </div>
            }

            @if (IsError)
            {
                <div class="form-group">
                    <div class="alert alert-danger" role="alert">@Error</div>
                </div>
            }

            @if (IsSuccess)
            {
                <div class="form-group">
                    <div class="alert alert-success" role="alert">Successful authorization!</div>
                </div>
            }


            <div class="form-group">
                <button class="btn btn-primary" onclick="@(async () => await SignIn())">Sign In</button>
            </div>


            @if (MailerWebCurrentUser != null)
            {
                <div class="form-group">
                    <div class="card">
                        <div class="card-header">
                            Current account
                        </div>
                        <div class="card-body">
                            @MailerWebCurrentUser.Login
                        </div>
                    </div>
                </div>
            }

            @if (MailerWebUsersList != null)
            {
                <div class="form-group">
                    <div class="card">
                        <div class="card-header">
                            Added accounts
                        </div>
                        <div class="card-body">
                            @foreach (var value in MailerWebUsersList)
                            {
                                <button type="button" class="btn btn-link" onclick="@(async () => await SetCurrent(value))">@value.Login</button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>


@functions
{
    private bool ShowAdditionalSettings { get; set; } = false;
    private string Error { get; set; }
    private bool IsError { get; set; }

    private bool IsSuccess { get; set; }

    private string Login { get; set; }
    private string Password { get; set; }
    private string ImapAddress { get; set; }
    private int ImapPort { get; set; }
    private string SmtpAddress { get; set; }
    private int SmtpPort { get; set; }
    private bool NewSettings { get; set; }

    List<StorageRecord> MailerWebUsersList { get; set; }
    StorageRecord MailerWebCurrentUser { get; set; }


    protected override void OnInit()
    {
        try
        {
            MailerWebUsersList = JsonConvert.DeserializeObject<List<StorageRecord>>(Storage["MailerWebUsers"]);
            MailerWebCurrentUser = JsonConvert.DeserializeObject<StorageRecord>(Storage["MailerWebCurrentUser"]);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task SetCurrent(StorageRecord record)
    {
        MailerWebCurrentUser = record;
        Storage["MailerWebCurrentUser"] = JsonConvert.SerializeObject(MailerWebCurrentUser);
    }

    private async Task SignIn()
    {
        IsError = false;
        IsSuccess = false;
        var authCredentials = new SignCredentials
        {
            ConnectionSettings = null,
            Login = Login,
            Password = Password,
            NewConnectionSettings = NewSettings
        };


        if (!string.IsNullOrEmpty(ImapAddress))
        {
            var imap = new ImapConfiguration() { Address = ImapAddress, Port = ImapPort };
            var smtp = new SmtpConfiguration() { Address = SmtpAddress, Port = SmtpPort };
            authCredentials.ConnectionSettings = new ConnectionConfiguration() { ImapConfiguration = imap, SmtpConfiguration = smtp};
            authCredentials.NewConnectionSettings = NewSettings;
        }

        var response = await Http.Request(HttpMethod.Post, UriHelper.GetBaseUri() + "api/imap/SignIn", authCredentials);

        if (!response.IsSuccessStatusCode)
        {
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
            Error = response.StatusCode + ": " + errorResponse.UserMessage;

            IsError = true;

            return;
        }

        var successResponse = JsonConvert.DeserializeObject<TokenResponse>(await response.Content.ReadAsStringAsync());

        var storageRecord = new StorageRecord { Login = Login, Token = successResponse.Token };

        if (MailerWebUsersList == null)
        {
            MailerWebUsersList = new List<StorageRecord> { storageRecord };
        }
        else
        {
            if (MailerWebUsersList.FirstOrDefault(e => e.Login == Login) != null)
            {
                MailerWebUsersList.Remove(MailerWebUsersList.FirstOrDefault(e => e.Login == Login));
            }
            MailerWebUsersList.Add(storageRecord);
        }

        MailerWebCurrentUser = storageRecord;

        Storage["MailerWebUsers"] = JsonConvert.SerializeObject(MailerWebUsersList);

        Storage["MailerWebCurrentUser"] = JsonConvert.SerializeObject(storageRecord);

        IsSuccess = true;

    }
}
