@page "/settings"

@using System.Net
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using MailerWeb.Shared.Models
@using MailerWeb.Shared.Models.Requests;
@using MailerWeb.Shared.Models.Responses;
@using Microsoft.AspNetCore.Components
@using Services
@using Newtonsoft.Json;

@inject IUriHelper UriHelper
@inject LocalStorage Storage
@inject HttpService Http
@inject LanguageService Lang



<div class="row">
    <div class="col-md-8">
        <p class="h1">@Lang.Languages[CurrentLanguage]["sett"]</p>
        @if (MailerWebCurrentUser != null)
        {
            @if (Signatures != null && Signatures.Count > 0)
            {
                <div class="form-group">
                    <label for="exampleFormControlSelect2">@Lang.Languages[CurrentLanguage]["ss"]</label>
                    <select multiple class="form-control" id="exampleFormControlSelect2" onchange="@ChangedEvent">
                        @foreach (var item in Signatures)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            }
            <div class="form-group">
                <label for="exampleFormControlInput1">@Lang.Languages[CurrentLanguage]["name"]</label>
                <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="@Lang.Languages[CurrentLanguage]["jd"]" bind="@Name" />
            </div>
            <div class="form-group">
                <label for="exampleFormControlTextarea1">@Lang.Languages[CurrentLanguage]["st"]</label>
                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" bind="@SignatureText"></textarea>
            </div>
            <div class="form-group">
                <button class="btn btn-primary" onclick="@(async () => await Add())">@Lang.Languages[CurrentLanguage]["add"]</button>
                @if (Selected != 0)
                {
            <button class="btn btn-warning" onclick="@(async () => await Edit())">@Lang.Languages[CurrentLanguage]["edit"]</button>
            <button class="btn btn-danger" onclick="@(async () => await Delete())">@Lang.Languages[CurrentLanguage]["del"]</button>
                }
            </div>

            <div class="form-group">
                <label for="exampleFormControlSelect12">@Lang.Languages[CurrentLanguage]["lang"]</label>
                <select class="form-control" id="exampleFormControlSelect12" onchange="@LangChangedEvent">
                    <option value="0">English</option>
                    <option value="1">Русский</option>
                </select>
            </div>

            <div class="form-group">
                <label for="exampleFormControlSelect13">@Lang.Languages[CurrentLanguage]["theme"]</label>
                <select class="form-control" id="exampleFormControlSelect13" onchange="@ThemeChangedEvent">
                    <option value="bootstrap">Default</option>
                    <option value="darkly">Darkly</option>
                    <option value="lux">Lux</option>
                    <option value="sketchy">Sketchy</option>
                    <option value="slate">Slate</option>
                </select>
            </div>

            <div class="form-group">
                <button class="btn btn-primary" onclick="@(async () => await Save())">Save</button>
                <small class="form-text text-muted">@Lang.Languages[CurrentLanguage]["prr"]</small>
            </div>

            @if (IsError)
            {
                <div class="form-group">
                    <div class="alert alert-danger" role="alert">@Error</div>
                </div>
            }

            @if (IsSuccess)
            {
                <div class="form-group">
                    <div class="alert alert-success" role="alert">@Lang.Languages[CurrentLanguage]["ok"]</div>
                </div>
            }

        }
        else
        {
            <div class="form-group">
                <div class="alert alert-primary" role="alert">
                    <h4 class="alert-heading">@Lang.Languages[CurrentLanguage]["oops"]</h4>
                    <p>@Lang.Languages[Language]["notlogged"]</p>
                </div>
            </div>
        }
    </div>
</div>


@functions
{
    private string Error { get; set; }
    private bool IsError { get; set; }
    private bool IsSuccess { get; set; }
    private StorageRecord MailerWebCurrentUser { get; set; }
    private List<Signature> Signatures { get; set; }
    private int Selected { get; set; }
    private string Name { get; set; }
    private string SignatureText { get; set; }
    private int Language { get; set; }
    private string Theme { get; set; } = "bootstrap";
    private int CurrentLanguage { get; set; }


    protected void ChangedEvent(UIChangeEventArgs e)
    {
        Selected = Convert.ToInt32(e.Value);
        var signature = Signatures.FirstOrDefault(k => k.Id == Selected);
        Name = signature.Name;
        SignatureText = signature.SignatureText;
        StateHasChanged();
    }

    protected override async void OnInit()
    {
        try
        {
            CurrentLanguage = Convert.ToInt32(Storage["MailerWebLanguage"]);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        try
        {
            IsError = false;
            IsSuccess = false;
            if (!string.IsNullOrEmpty(Storage["MailerWebCurrentUser"]))
            {
                MailerWebCurrentUser = JsonConvert.DeserializeObject<StorageRecord>(Storage["MailerWebCurrentUser"]);
                var response = await Http.Request(HttpMethod.Get, UriHelper.GetBaseUri() + "api/user/getsignatures?token=" + MailerWebCurrentUser.Token);

                if (!response.IsSuccessStatusCode)
                {
                    var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
                    Error = response.StatusCode + ": " + errorResponse.UserMessage;

                    IsError = true;

                    return;
                }

                var successResponse = JsonConvert.DeserializeObject<SignaturesResponse>(await response.Content.ReadAsStringAsync());

                Signatures = successResponse.Signatures;

                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Error = e.Message;
            IsError = true;
        }

        try
        {
            CurrentLanguage = Convert.ToInt32(Storage["MailerWebLanguage"]);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task Add()
    {
        IsError = false;
        IsSuccess = false;
        var signature = new Signature { Name = Name, SignatureText = SignatureText };

        var response = await Http.Request(HttpMethod.Post, UriHelper.GetBaseUri() + "api/user/addsignature", new AddSignatureData() { Signature = signature, Token = MailerWebCurrentUser.Token});
        if (!response.IsSuccessStatusCode)
        {
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
            Error = response.StatusCode + ": " + errorResponse.UserMessage;

            IsError = true;

            return;
        }

        var successResponse = JsonConvert.DeserializeObject<SignaturesResponse>(await response.Content.ReadAsStringAsync());

        Signatures.Add(successResponse.Signatures.FirstOrDefault());

        IsSuccess = true;

    }

    private async Task Edit()
    {
        IsError = false;
        IsSuccess = false;
        var signature = new Signature { Name = Name, SignatureText = SignatureText };

        var response = await Http.Request(HttpMethod.Put, UriHelper.GetBaseUri() + "api/user/editsignature", new EditSignatureData() { NewSignature = signature, SignatureId = Selected, Token = MailerWebCurrentUser.Token });
        if (!response.IsSuccessStatusCode)
        {
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
            Error = response.StatusCode + ": " + errorResponse.UserMessage;

            IsError = true;

            return;
        }

        var successResponse = JsonConvert.DeserializeObject<SignaturesResponse>(await response.Content.ReadAsStringAsync());

        Signatures.Remove(Signatures.FirstOrDefault(e => e.Id == Selected));

        Signatures.Add(successResponse.Signatures.FirstOrDefault());

        IsSuccess = true;

    }

    private async Task Delete()
    {
        IsError = false;
        IsSuccess = false;
        var signature = new Signature { Name = Name, SignatureText = SignatureText };

        var response = await Http.Request(HttpMethod.Delete, UriHelper.GetBaseUri() + "api/user/deletesignature?token=" + MailerWebCurrentUser.Token + "&signatureId=" + Selected);
        if (!response.IsSuccessStatusCode)
        {
            var errorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
            Error = response.StatusCode + ": " + errorResponse.UserMessage;

            IsError = true;

            return;
        }

        Signatures.Remove(Signatures.FirstOrDefault(e => e.Id == Selected));

        IsSuccess = true;

    }

    protected void LangChangedEvent(UIChangeEventArgs e)
    {
        Language = Convert.ToInt32(e.Value);
    }

    protected void ThemeChangedEvent(UIChangeEventArgs e)
    {
        Theme = Convert.ToString(e.Value);
    }

    private async Task Save()
    {
        try
        {
            Storage["MailerWebTheme"] = Theme;
            Storage["MailerWebLanguage"] = Convert.ToString(Language);
            IsSuccess = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            IsError = true;
        }
    }

}